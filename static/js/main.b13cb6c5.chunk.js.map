{"version":3,"sources":["components/TodoTemplate.js","components/TodoAdd.js","components/TodoObject.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","date","Date","year","getFullYear","month","getMonth","day","getDate","className","TodoAdd","onAdd","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoObject","todo","onRemove","onCheck","id","text","checked","cn","onClick","TodoList","todos","map","key","App","setTodos","nextId","useRef","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b13cb6c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TodoTemplate.scss\";\n\nconst TodoTemplate = ({ children }) => {\n  const date = new Date();\n  const year = date.getFullYear();\n  const monthNames = [\"JAN\", \"FAB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n  const month = monthNames[date.getMonth()];\n  const day = date.getDate();\n\n  return (\n    <div className=\"TodoTemplate\">\n      <div className=\"app_header\">\n        <div className=\"date_area\">\n          <div className=\"left_col\">\n            <div className=\"day_area\">{day}</div>\n          </div>\n          <div className=\"right_col\">\n            <div className=\"month_area\">{month}</div>\n            <div className=\"year_area\">{year}</div>\n          </div>\n        </div>\n        <div className=\"title\">TODO LIST</div>\n      </div>\n      <div className=\"content\">{children}</div>\n    </div>\n  );\n};\n\nexport default TodoTemplate;\n","import React, { useState, useCallback } from \"react\";\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport \"./TodoAdd.scss\";\n\nconst TodoAdd = ({ onAdd }) => {\n  const [value, setValue] = useState(\"\");\n\n  const onChange = useCallback(e => {\n    setValue(e.target.value);\n  }, []); // 컴포넌트가 렌더링될 때 단 한번만 함수 생성\n\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      onAdd(value);\n      setValue(\"\"); // 입력창 값 비우기\n    },\n    [onAdd, value]\n  );\n\n  return (\n    <form className=\"TodoAdd\" onSubmit={onSubmit}>\n      <input\n        placeholder=\"추가할 할 일을 입력하세요\"\n        value={value}\n        onChange={onChange}\n      />\n      <button type=\"submit\">\n        <MdAddCircleOutline />\n      </button>\n    </form>\n  );\n};\n\nexport default TodoAdd;\n","import React from \"react\";\nimport {\n  MdCheckBoxOutlineBlank,\n  MdCheckBox,\n  MdRemoveCircleOutline\n} from \"react-icons/md\";\nimport cn from \"classnames\";\nimport \"./TodoObject.scss\";\n\nconst TodoObject = ({ todo, onRemove, onCheck }) => {\n  const { id, text, checked } = todo;\n\n  return (\n    <div className=\"TodoObject\">\n      <div className={cn(\"checkbox\", { checked })} onClick={() => onCheck(id)}>\n        {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n        <div className=\"text\">{text}</div>\n      </div>\n      <div className=\"remove\" onClick={() => onRemove(id)}>\n        <MdRemoveCircleOutline />\n      </div>\n    </div>\n  );\n};\n\nexport default TodoObject;\n","import React from \"react\";\nimport TodoObject from \"./TodoObject\";\nimport \"./TodoList.scss\";\n\nconst TodoList = ({ todos, onRemove, onCheck }) => {\n  return (\n    <div className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoObject\n          todo={todo}\n          key={todo.id}\n          onRemove={onRemove}\n          onCheck={onCheck}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoAdd from './components/TodoAdd';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: '리액트 공부하기',\n      checked: true,\n    },\n    {\n      id: 2,\n      text: '도서관가서 책 빌리기',\n      checked: true,\n    },\n    {\n      id: 3,\n      text: '방 정리하기',\n      checked: false,\n    },\n  ]);\n\n  const nextId = useRef(4);\n\n  const onAdd = useCallback(\n    text => {\n      const todo = {\n        id: nextId.current,\n        text,\n        checked: false,\n      };\n      setTodos(todos.concat(todo));\n      nextId.current++;\n    },\n    [todos]\n  );\n\n  const onRemove = useCallback(\n    id => {\n      setTodos(todos.filter(todo => todo.id !== id)); // 클릭되지 않은 나머지만 추출하여 새로운 배열 생성\n    },\n    [todos]\n  );\n\n  const onCheck = useCallback(\n    id => {\n      setTodos(\n        todos.map(todo => \n          todo.id === id ? { ...todo, checked: !todo.checked } : todo)\n      );\n    },\n    [todos]\n  );\n\n  return (\n    <TodoTemplate>\n      <TodoAdd onAdd={onAdd} />\n      <TodoList todos={todos} onRemove={onRemove} onCheck={onCheck} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}